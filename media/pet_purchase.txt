from django.shortcuts import render, redirect
from .models import Pet, Purchase
from django.contrib.auth.decorators import login_required

@login_required
def purchase_pet(request, pet_id):
    try:
        pet = Pet.objects.get(id=pet_id)

        # Check if the pet is available for purchase
        if not pet.is_available:
            return render(request, 'pet_not_available.html')  # Create a template for this scenario

        user = request.user

        # Check if the user has enough funds to purchase the pet
        if user.balance < pet.price:
            return render(request, 'insufficient_funds.html')  # Create a template for this scenario

        # Deduct the pet's price from the user's account balance
        user.balance -= pet.price
        user.save()

        # Mark the pet as no longer available
        pet.is_available = False
        pet.save()

        # Create a purchase record
        purchase = Purchase(user=user, pet=pet)
        purchase.save()

        return render(request, 'purchase_success.html')  # Create a template for this scenario

    except Pet.DoesNotExist:
        return render(request, 'pet_not_found.html')  # Create a template for this scenario

pet_details
from django.shortcuts import render, get_object_or_404
from .models import Pet

def pet_detail(request, pet_id):
    # Get the selected pet or return a 404 page if the pet doesn't exist
    pet = get_object_or_404(Pet, id=pet_id)

    context = {
        'pet': pet,
    }

    return render(request, 'pet_detail.html', context)


pet purchase:
  from django.db import models
from django.contrib.auth.models import User

class Pet(models.Model):
    # ... other fields ...

    def purchase(self, buyer):
        # Check if the pet is available for purchase
        if not self.is_available:
            return False, "This pet is no longer available for purchase."

        # Check if the buyer has enough funds to purchase the pet
        if buyer.balance < self.price:
            return False, "Insufficient funds to purchase this pet."

        # Deduct the pet's price from the buyer's account balance
        buyer.balance -= self.price
        buyer.save()

        # Mark the pet as no longer available
        self.is_available = False
        self.save()

        # Create a purchase record
        purchase = Purchase(user=buyer, pet=self)
        purchase.save()

        return True, "Purchase successful."

class Purchase(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    pet = models.ForeignKey(Pet, on_delete=models.CASCADE)
    purchase_date = models.DateTimeField(auto_now_add=True)
    # ... other fields ...





    purchase transaction of a pet:

    from django.shortcuts import render, redirect, get_object_or_404
from .models import Pet, Purchase
from django.contrib.auth.decorators import login_required

@login_required
def purchase_pet(request, pet_id):
    try:
        # Get the selected pet or return a 404 page if the pet doesn't exist
        pet = get_object_or_404(Pet, id=pet_id)

        # Check if the pet is available for purchase
        if not pet.is_available:
            return render(request, 'pet_not_available.html')  # Create a template for this scenario

        user = request.user

        # Check if the user has enough funds to purchase the pet
        if user.balance < pet.price:
            return render(request, 'insufficient_funds.html')  # Create a template for this scenario

        # Deduct the pet's price from the user's account balance
        user.balance -= pet.price
        user.save()

        # Mark the pet as no longer available
        pet.is_available = False
        pet.save()

        # Create a purchase record
        purchase = Purchase(user=user, pet=pet)
        purchase.save()

        return render(request, 'purchase_success.html')  # Create a template for this scenario

    except Pet.DoesNotExist:
        return render(request, 'pet_not_found.html')  # Create a template for this scenario

